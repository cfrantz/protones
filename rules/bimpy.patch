diff --git a/bimpy.cpp b/bimpy.cpp
index a46fecd..9bf1488 100644
--- a/bimpy.cpp
+++ b/bimpy.cpp
@@ -3,20 +3,24 @@
  * License: https://raw.githubusercontent.com/podgorskiy/bimpy/master/LICENSE.txt
  */
 
-#include "imgui_glfw.h"
+#include "imgui.h"
 #define IMGUI_DEFINE_MATH_OPERATORS
 #include "imgui_internal.h"
+#if 0
 #include <GL/gl3w.h>
 #include <GLFW/glfw3.h>
+#endif
 #include <pybind11/pybind11.h>
 #include <pybind11/operators.h>
 #include <pybind11/functional.h>
 #include <pybind11/stl.h>
+#include <pybind11/embed.h>
 #include <memory>
 #include <mutex>
 
 namespace py = pybind11;
 
+#if 0
 class Context
 {
 public:
@@ -155,6 +159,7 @@ bool Context::ShouldClose()
 {
 	return glfwWindowShouldClose(m_imp->m_window) != 0;
 }
+#endif
 
 struct Bool
 {
@@ -200,8 +205,11 @@ void  AddTriangle(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col,
 void  AddTriangleFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col){ ImGui::GetWindowDrawList()->AddTriangleFilled(a, b, c, col); }
 void  AddCircle(const ImVec2& centre, float radius, ImU32 col, int num_segments, float thickness){ ImGui::GetWindowDrawList()->AddCircle(centre, radius, col, num_segments, thickness); }
 void  AddCircleFilled(const ImVec2& centre, float radius, ImU32 col, int num_segments){ ImGui::GetWindowDrawList()->AddCircleFilled(centre, radius, col, num_segments); }
+void  AddText(const ImVec2& pos, ImU32 col, const char* text, float font_size=0.0f, float wrap_width = 0.0f) {
+    ImGui::GetWindowDrawList()->AddText(nullptr, font_size, pos, col, text, nullptr, wrap_width, nullptr);
+}
 
-PYBIND11_MODULE(_bimpy, m) {
+PYBIND11_EMBEDDED_MODULE(bimpy, m) {
 	static Bool null;
 	null.null = true;
 	
@@ -222,7 +230,7 @@ PYBIND11_MODULE(_bimpy, m) {
 		.value("NoScrollWithMouse", ImGuiWindowFlags_::ImGuiWindowFlags_NoScrollWithMouse)
 		.value("NoCollapse", ImGuiWindowFlags_::ImGuiWindowFlags_NoCollapse)
 		.value("AlwaysAutoResize", ImGuiWindowFlags_::ImGuiWindowFlags_AlwaysAutoResize)
-		.value("ShowBorders", ImGuiWindowFlags_::ImGuiWindowFlags_ShowBorders)
+		//.value("ShowBorders", ImGuiWindowFlags_::ImGuiWindowFlags_ShowBorders)
 		.value("NoSavedSettings", ImGuiWindowFlags_::ImGuiWindowFlags_NoSavedSettings)
 		.value("NoInputs", ImGuiWindowFlags_::ImGuiWindowFlags_NoInputs)
 		.value("MenuBar", ImGuiWindowFlags_::ImGuiWindowFlags_MenuBar)
@@ -274,7 +282,7 @@ PYBIND11_MODULE(_bimpy, m) {
 		.value("ScrollbarGrab", ImGuiCol_::ImGuiCol_ScrollbarGrab)
 		.value("ScrollbarGrabHovered", ImGuiCol_::ImGuiCol_ScrollbarGrabHovered)
 		.value("ScrollbarGrabActive", ImGuiCol_::ImGuiCol_ScrollbarGrabActive)
-		.value("ComboBg", ImGuiCol_::ImGuiCol_ComboBg)
+		//.value("ComboBg", ImGuiCol_::ImGuiCol_ComboBg)
 		.value("CheckMark", ImGuiCol_::ImGuiCol_CheckMark)
 		.value("SliderGrab", ImGuiCol_::ImGuiCol_SliderGrab)
 		.value("SliderGrabActive", ImGuiCol_::ImGuiCol_SliderGrabActive)
@@ -290,9 +298,9 @@ PYBIND11_MODULE(_bimpy, m) {
 		.value("ResizeGrip", ImGuiCol_::ImGuiCol_ResizeGrip)
 		.value("ResizeGripActive", ImGuiCol_::ImGuiCol_ResizeGripActive)
 		.value("ResizeGripHovered", ImGuiCol_::ImGuiCol_ResizeGripHovered)
-		.value("CloseButton", ImGuiCol_::ImGuiCol_CloseButton)
-		.value("CloseButtonHovered", ImGuiCol_::ImGuiCol_CloseButtonHovered)
-		.value("CloseButtonActive", ImGuiCol_::ImGuiCol_CloseButtonActive)
+		//.value("CloseButton", ImGuiCol_::ImGuiCol_CloseButton)
+		//.value("CloseButtonHovered", ImGuiCol_::ImGuiCol_CloseButtonHovered)
+		//.value("CloseButtonActive", ImGuiCol_::ImGuiCol_CloseButtonActive)
 		.value("PlotLines", ImGuiCol_::ImGuiCol_PlotLines)
 		.value("PlotLinesHovered", ImGuiCol_::ImGuiCol_PlotLinesHovered)
 		.value("PlotHistogram", ImGuiCol_::ImGuiCol_PlotHistogram)
@@ -300,7 +308,7 @@ PYBIND11_MODULE(_bimpy, m) {
 		.value("TextSelectedBg", ImGuiCol_::ImGuiCol_TextSelectedBg)
 		.value("ModalWindowDarkening", ImGuiCol_::ImGuiCol_ModalWindowDarkening)
 		.export_values();
-		
+#if 0
 	py::class_<Context>(m, "Context")
 		.def(py::init())
 		.def("init", &Context::Init, "Initializes context and creates window")
@@ -312,13 +320,14 @@ PYBIND11_MODULE(_bimpy, m) {
 			{
 				self.Render();
 			});
+#endif
 	
-	py::enum_<ImGuiCorner>(m, "Corner")
-		.value("TopLeft", ImGuiCorner::ImGuiCorner_TopLeft)
-		.value("TopRight", ImGuiCorner::ImGuiCorner_TopRight)
-		.value("BotRight", ImGuiCorner::ImGuiCorner_BotRight)
-		.value("BotLeft", ImGuiCorner::ImGuiCorner_BotLeft)
-		.value("All", ImGuiCorner::ImGuiCorner_All)
+	py::enum_<ImDrawCornerFlags_>(m, "CornerFlags")
+		.value("TopLeft", ImDrawCornerFlags_::ImDrawCornerFlags_TopLeft)
+		.value("TopRight", ImDrawCornerFlags_::ImDrawCornerFlags_TopRight)
+		.value("BotRight", ImDrawCornerFlags_::ImDrawCornerFlags_BotRight)
+		.value("BotLeft", ImDrawCornerFlags_::ImDrawCornerFlags_BotLeft)
+		.value("All", ImDrawCornerFlags_::ImDrawCornerFlags_All)
 		.export_values();
 	
 	py::class_<Bool>(m, "Bool")
@@ -374,10 +383,12 @@ PYBIND11_MODULE(_bimpy, m) {
 		.def_readwrite("window_padding", &ImGuiStyle::WindowPadding)
 		.def_readwrite("window_min_size", &ImGuiStyle::WindowMinSize)
 		.def_readwrite("window_rounding", &ImGuiStyle::WindowRounding)
+		.def_readwrite("window_border_size", &ImGuiStyle::WindowBorderSize)
 		.def_readwrite("window_title_align", &ImGuiStyle::WindowTitleAlign)
-		.def_readwrite("child_window_rounding", &ImGuiStyle::ChildWindowRounding)
+		.def_readwrite("child_rounding", &ImGuiStyle::ChildRounding)
 		.def_readwrite("frame_padding", &ImGuiStyle::FramePadding)
 		.def_readwrite("frame_rounding", &ImGuiStyle::FrameRounding)
+		.def_readwrite("frame_border_size", &ImGuiStyle::FrameBorderSize)
 		.def_readwrite("item_spacing", &ImGuiStyle::ItemSpacing)
 		.def_readwrite("item_inner_spacing", &ImGuiStyle::ItemInnerSpacing)
 		.def_readwrite("touch_extra_padding", &ImGuiStyle::TouchExtraPadding)
@@ -391,7 +402,7 @@ PYBIND11_MODULE(_bimpy, m) {
 		.def_readwrite("display_window_padding", &ImGuiStyle::DisplayWindowPadding)
 		.def_readwrite("display_safe_area_padding", &ImGuiStyle::DisplaySafeAreaPadding)
 		.def_readwrite("anti_aliased_lines", &ImGuiStyle::AntiAliasedLines)
-		.def_readwrite("anti_aliased_shapes", &ImGuiStyle::AntiAliasedShapes)
+		.def_readwrite("anti_aliased_fill", &ImGuiStyle::AntiAliasedFill)
 		.def_readwrite("curve_tessellation_tol", &ImGuiStyle::CurveTessellationTol)
 		.def("get_color",[](ImGuiStyle& self, ImGuiCol_ a)
 			{
@@ -402,13 +413,62 @@ PYBIND11_MODULE(_bimpy, m) {
 				self.Colors[(int)a] = c;
 			});
 
+    py::class_<ImGuiIO>(m, "ImGuiIO")
+        .def(py::init())
+        .def_readonly("display_size", &ImGuiIO::DisplaySize)
+        .def_readonly("delta_time", &ImGuiIO::DeltaTime)
+        .def_readonly("ini_saving_rate", &ImGuiIO::IniSavingRate)
+        .def_readonly("ini_filename", &ImGuiIO::IniFilename)
+        .def_readonly("log_filename", &ImGuiIO::LogFilename)
+        .def_readonly("mouse_double_click_time", &ImGuiIO::MouseDoubleClickTime)
+        .def_readonly("mouse_drag_threshold", &ImGuiIO::MouseDragThreshold)
+        .def_property_readonly("key_map", [](ImGuiIO* self){ return std::vector<int>(std::begin(self->KeyMap), std::end(self->KeyMap)); })
+        .def_readonly("key_repeat_delay", &ImGuiIO::KeyRepeatDelay)
+        .def_readonly("key_repeat_rate", &ImGuiIO::KeyRepeatRate)
+//        .def_readonly("fonts", &ImGuiIO::Fonts)
+        .def_readonly("font_global_scale", &ImGuiIO::FontGlobalScale)
+        .def_readonly("font_allow_user_scaling", &ImGuiIO::FontAllowUserScaling)
+//        .def_readonly("font_default", &ImGuiIO::FontDefault)
+        .def_readonly("display_framebuffer_scale", &ImGuiIO::DisplayFramebufferScale)
+        .def_readonly("display_visible_min", &ImGuiIO::DisplayVisibleMin)
+        .def_readonly("display_visible_max", &ImGuiIO::DisplayVisibleMax)
+//        .def_readonly("config_cursor_blink", &ImGuiIO::ConfigCursorBlink)
+//        .def_readonly("config_resize_windows_from_edges", &ImGuiIO::ConfigResizeWindowsFromEdges)
+        .def_readonly("mouse_pos", &ImGuiIO::MousePos)
+        .def_property_readonly("mouse_down", [](ImGuiIO* self){ return std::vector<bool>(std::begin(self->MouseDown), std::end(self->MouseDown)); })
+        .def_readonly("mouse_wheel", &ImGuiIO::MouseWheel)
+        .def_readonly("mouse_wheel_h", &ImGuiIO::MouseWheelH)
+        .def_readonly("mouse_draw_cursor", &ImGuiIO::MouseDrawCursor)
+        .def_readonly("key_ctrl", &ImGuiIO::KeyCtrl)
+        .def_readonly("key_shift", &ImGuiIO::KeyShift)
+        .def_readonly("key_alt", &ImGuiIO::KeyAlt)
+        .def_readonly("key_super", &ImGuiIO::KeySuper)
+        .def_property_readonly("keys_down", [](ImGuiIO* self){ return std::vector<bool>(std::begin(self->KeysDown), std::end(self->KeysDown)); })
+        .def_readonly("want_capture_mouse", &ImGuiIO::WantCaptureMouse)
+        .def_readonly("want_capture_keyboard", &ImGuiIO::WantCaptureKeyboard)
+        .def_readonly("want_text_input", &ImGuiIO::WantTextInput)
+        .def_readonly("want_set_mouse_pos", &ImGuiIO::WantSetMousePos)
+//        .def_readonly("want_save_ini_settings", &ImGuiIO::WantSaveIniSettings)
+        .def_readonly("nav_active", &ImGuiIO::NavActive)
+        .def_readonly("nav_visible", &ImGuiIO::NavVisible)
+        .def_readonly("framerate", &ImGuiIO::Framerate)
+        .def_readonly("metrics_render_vertices", &ImGuiIO::MetricsRenderVertices)
+        .def_readonly("metrics_render_indices", &ImGuiIO::MetricsRenderIndices)
+//        .def_readonly("metrics_render_windows", &ImGuiIO::MetricsRenderWindows)
+        .def_readonly("metrics_active_windows", &ImGuiIO::MetricsActiveWindows)
+//        .def_readonly("metrics_active_allocations", &ImGuiIO::MetricsActiveAllocations)
+        .def_readonly("mouse_delta", &ImGuiIO::MouseDelta);
+
+    m.def("is_mouse_dragging", &ImGui::IsMouseDragging,
+          py::arg("name") = 0, py::arg("lock_threshold") = -1.0f);
+	m.def("get_io", &ImGui::GetIO);
 	m.def("get_style", &ImGui::GetStyle);
 	m.def("set_style", [](const ImGuiStyle& a) 
 		{
 			ImGui::GetStyle() = a;
 		});
 	
-	m.def("show_test_window", [](){ ImGui::ShowTestWindow(); });
+	//m.def("show_test_window", [](){ ImGui::ShowTestWindow(); });
 	
 	m.def("begin",[](const std::string& name, Bool& opened, ImGuiWindowFlags flags) -> bool
 		{
@@ -427,6 +487,15 @@ PYBIND11_MODULE(_bimpy, m) {
 		py::arg("str_id"), py::arg("size") = ImVec2(0,0), py::arg("border") = false, py::arg("extra_flags") = ImGuiWindowFlags_(0));
 		
 	m.def("end_child", &ImGui::EndChild);
+
+    m.def("begin_menu", &ImGui::BeginMenu, py::arg("label"), py::arg("enabled") = true);
+    m.def("end_menu", &ImGui::EndMenu);
+    m.def("menu_item", [](const char* label, const char* shortcut, bool selected, bool enabled) -> bool
+        {
+            return ImGui::MenuItem(label, shortcut, selected, enabled);
+        },
+        py::arg("label"), py::arg("shortcut") = nullptr, py::arg("selected") = false, py::arg("enabled") = true);
+
 	
 	m.def("get_content_region_max", &ImGui::GetContentRegionMax);
 	m.def("get_content_region_avail", &ImGui::GetContentRegionAvail);
@@ -434,7 +503,7 @@ PYBIND11_MODULE(_bimpy, m) {
 	m.def("get_window_content_region_min", &ImGui::GetWindowContentRegionMin);
 	m.def("get_window_content_region_max", &ImGui::GetWindowContentRegionMax);
 	m.def("get_window_content_region_width", &ImGui::GetWindowContentRegionWidth);
-	m.def("get_window_font_size", &ImGui::GetWindowFontSize);
+	m.def("get_font_size", &ImGui::GetFontSize);
 	m.def("set_window_font_scale", &ImGui::SetWindowFontScale);
 	m.def("get_window_pos", &ImGui::GetWindowPos);
 	m.def("get_window_size", &ImGui::GetWindowSize);
@@ -527,6 +596,10 @@ PYBIND11_MODULE(_bimpy, m) {
 	m.def("button", &ImGui::Button, py::arg("label"), py::arg("size") = ImVec2(0,0));
 	m.def("small_button", &ImGui::SmallButton);
 	m.def("invisible_button", &ImGui::InvisibleButton);
+	m.def("is_item_active", &ImGui::IsItemActive);
+	m.def("is_item_focused", &ImGui::IsItemFocused);
+	m.def("is_item_hovered", &ImGui::IsItemHovered, py::arg("flags") = 0);
+	m.def("is_item_clicked", &ImGui::IsItemClicked, py::arg("mouse_button") = 0);
 	m.def("collapsing_header", [](const char* label, ImGuiTreeNodeFlags flags){ return ImGui::CollapsingHeader(label, flags); }, py::arg("label"), py::arg("flags") = 0);
 	m.def("checkbox", [](const char* label, Bool& v){ return ImGui::Checkbox(label, &v.value); });
 	m.def("radio_button", [](const char* label, bool active){ return ImGui::RadioButton(label, active); });
@@ -768,14 +841,38 @@ PYBIND11_MODULE(_bimpy, m) {
 		, py::arg("graph_size")	 = ImVec2(0,0)
 		, py::arg("stride") = sizeof(float)
 		);
+
+	m.def("plot_histogram", [](
+		const char* label,
+		const std::vector<float>& values,
+		int values_offset = 0,
+		const char* overlay_text = NULL,
+		float scale_min = FLT_MAX,
+		float scale_max = FLT_MAX,
+		ImVec2 graph_size = ImVec2(0,0),
+		int stride = sizeof(float))
+		{ 
+			ImGui::PlotHistogram(label, values.data(), (int)values.size(), values_offset, overlay_text, scale_min, scale_max, graph_size, stride); 
+		}
+		, py::arg("label")
+		, py::arg("values")
+		, py::arg("values_offset") = 0
+		, py::arg("overlay_text") = nullptr
+		, py::arg("scale_min") = FLT_MAX
+		, py::arg("scale_max") = FLT_MAX
+		, py::arg("graph_size")	 = ImVec2(0,0)
+		, py::arg("stride") = sizeof(float)
+		);
+		
+	m.def("progress_bar", &ImGui::ProgressBar, py::arg("fraction"), py::arg("size_arg") = ImVec2(-1,0), py::arg("overlay") = nullptr);
 		
 	m.def("progress_bar", &ImGui::ProgressBar, py::arg("fraction"), py::arg("size_arg") = ImVec2(-1,0), py::arg("overlay") = nullptr);
 
 	m.def("color_button", &ImGui::ColorButton, py::arg("desc_id"), py::arg("col"), py::arg("flags") = 0, py::arg("size") = ImVec2(0,0));
 	
 	m.def("add_line", &AddLine, py::arg("a"), py::arg("b"), py::arg("col"), py::arg("thickness") = 1.0f);
-	m.def("add_rect", &AddRect, py::arg("a"), py::arg("b"), py::arg("col"), py::arg("rounding") = 0.0f, py::arg("rounding_corners_flags") = ImGuiCorner::ImGuiCorner_All, py::arg("thickness") = 1.0f);
-	m.def("add_rect_filled", &AddRectFilled, py::arg("a"), py::arg("b"), py::arg("col"), py::arg("rounding") = 0.0f, py::arg("rounding_corners_flags") = ImGuiCorner::ImGuiCorner_All);
+	m.def("add_rect", &AddRect, py::arg("a"), py::arg("b"), py::arg("col"), py::arg("rounding") = 0.0f, py::arg("rounding_corners_flags") = ImDrawCornerFlags_::ImDrawCornerFlags_All, py::arg("thickness") = 1.0f);
+	m.def("add_rect_filled", &AddRectFilled, py::arg("a"), py::arg("b"), py::arg("col"), py::arg("rounding") = 0.0f, py::arg("rounding_corners_flags") = ImDrawCornerFlags_::ImDrawCornerFlags_All);
 	m.def("add_rect_filled_multicolor", &AddRectFilledMultiColor, py::arg("a"), py::arg("b"), py::arg("col_upr_left"), py::arg("col_upr_right"), py::arg("col_bot_right"), py::arg("col_bot_lefs"));
 	m.def("add_quad", &AddQuad, py::arg("a"), py::arg("b"), py::arg("c"), py::arg("d"), py::arg("col"), py::arg("thickness") = 1.0f);
 	m.def("add_quad_filled", &AddQuadFilled, py::arg("a"), py::arg("b"), py::arg("c"), py::arg("d"), py::arg("col"));
@@ -783,4 +880,6 @@ PYBIND11_MODULE(_bimpy, m) {
 	m.def("add_triangle_filled", &AddTriangleFilled, py::arg("a"), py::arg("b"), py::arg("c"), py::arg("col"));
 	m.def("add_circle", &AddCircle, py::arg("centre"), py::arg("radius"), py::arg("col"), py::arg("num_segments") = 12, py::arg("thickness") = 1.0f);
 	m.def("add_circle_filled", &AddCircleFilled, py::arg("centre"), py::arg("radius"), py::arg("col"), py::arg("num_segments") = 12);
+	m.def("add_text", &AddText, py::arg("pos"), py::arg("col"), py::arg("text"),
+                                py::arg("font_size")=0.0f, py::arg("wrap_width")=0.0f);
 }
