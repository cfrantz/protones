diff --git a/sources/bimpy.cpp b/sources/bimpy.cpp
index de3203f..4ae3d2a 100644
--- a/sources/bimpy.cpp
+++ b/sources/bimpy.cpp
@@ -3,30 +3,35 @@
  * License: https://raw.githubusercontent.com/podgorskiy/bimpy/master/LICENSE.txt
  */
 
-#include <imgui.h>
-#include <imgui_internal.h>
-#include "imgui_impl_glfw.h"
-#include "imgui_impl_opengl3.h"
+#include "imgui.h"
+#include "imgui_internal.h"
+//#include "imgui_impl_glfw.h"
+//#include "imgui_impl_opengl3.h"
 #include "runtime_error.h"
-#include <GL/gl3w.h>
-#include <GLFW/glfw3.h>
+//#include <GL/gl3w.h>
+//#include <GLFW/glfw3.h>
 #include <pybind11/pybind11.h>
 #include <pybind11/operators.h>
 #include <pybind11/functional.h>
 #include <pybind11/stl.h>
 #include <pybind11/numpy.h>
-#include <backward.hpp>
+#include <pybind11/embed.h>
+//#include <backward.hpp>
 #include <memory>
 #include <mutex>
 
-#ifndef BIMPY_IMGUI_CONFIG
-#error("imgui config is not used")
-#endif
+#include <SDL2/SDL.h>
+#include <SDL2/SDL_opengl.h>
+
+//#ifndef BIMPY_IMGUI_CONFIG
+//#error("imgui config is not used")
+//#endif
 
 namespace py = pybind11;
 
 typedef py::array_t<uint8_t, py::array::c_style> ndarray_uint8;
 
+#if 0
 class Context
 {
 public:
@@ -316,6 +321,7 @@ int Context::GetHeight() const
 {
 	return m_height;
 }
+#endif
 
 struct Bool
 {
@@ -353,8 +359,8 @@ struct String
 class Image
 {
 public:
-	Image& operator=(const Context&) = delete;
-	Image(const Context&) = delete;
+	//Image& operator=(const Context&) = delete;
+	//Image(const Context&) = delete;
 
 	Image(ndarray_uint8 ndarray): Image(ndarray.request())
 	{}
@@ -475,9 +481,12 @@ void  PathClear(){ ImGui::GetWindowDrawList()->PathClear(); }
 void  PathLineTo(const ImVec2& pos){ ImGui::GetWindowDrawList()->PathLineTo(pos); }
 void  PathFillConvex(ImU32 col){ ImGui::GetWindowDrawList()->PathFillConvex(col); }
 void  PathStroke(ImU32 col, bool closed, float thickness){ ImGui::GetWindowDrawList()->PathStroke(col, closed, thickness); }
+void  AddText(const ImVec2& pos, ImU32 col, const char* text, float font_size=0.0f, float wrap_width = 0.0f) {
+    ImGui::GetWindowDrawList()->AddText(nullptr, font_size, pos, col, text, nullptr, wrap_width, nullptr);
+}
 
 
-PYBIND11_MODULE(_bimpy, m) {
+PYBIND11_EMBEDDED_MODULE(bimpy, m) {
 	static Bool null;
 	null.null = true;
 
@@ -676,6 +685,7 @@ PYBIND11_MODULE(_bimpy, m) {
 			bool scale_to_monitor,
 			bool full_screen)
 	 */
+#if 0
 	py::class_<Context>(m, "Context")
 		.def(py::init())
 		.def("init", &Context::Init, "Initializes context and creates window",
@@ -709,6 +719,7 @@ PYBIND11_MODULE(_bimpy, m) {
 			{
 				self.Render();
 			});
+#endif
 
 	py::enum_<ImDrawCornerFlags_>(m, "Corner")
 		.value("TopLeft", ImDrawCornerFlags_TopLeft)
@@ -835,7 +846,47 @@ PYBIND11_MODULE(_bimpy, m) {
 			.def_readonly("mouse_down", &ImGuiIO::MouseDown)
 			.def_readonly("mouse_wheel", &ImGuiIO::MouseWheel)
 			.def_readonly("mouse_wheel", &ImGuiIO::MouseWheel)
-			;
+            .def_readonly("ini_saving_rate", &ImGuiIO::IniSavingRate)
+            .def_readonly("ini_filename", &ImGuiIO::IniFilename)
+            .def_readonly("log_filename", &ImGuiIO::LogFilename)
+            .def_readonly("mouse_double_click_time", &ImGuiIO::MouseDoubleClickTime)
+            .def_readonly("mouse_drag_threshold", &ImGuiIO::MouseDragThreshold)
+            .def_property_readonly("key_map", [](ImGuiIO* self){ return std::vector<int>(std::begin(self->KeyMap), std::end(self->KeyMap)); })
+            .def_readonly("key_repeat_delay", &ImGuiIO::KeyRepeatDelay)
+            .def_readonly("key_repeat_rate", &ImGuiIO::KeyRepeatRate)
+            //.def_readonly("fonts", &ImGuiIO::Fonts)
+            .def_readonly("font_allow_user_scaling", &ImGuiIO::FontAllowUserScaling)
+            //.def_readonly("font_default", &ImGuiIO::FontDefault)
+            .def_readonly("display_framebuffer_scale", &ImGuiIO::DisplayFramebufferScale)
+            //.def_readonly("display_visible_min", &ImGuiIO::DisplayVisibleMin)
+            //.def_readonly("display_visible_max", &ImGuiIO::DisplayVisibleMax)
+            //.def_readonly("config_cursor_blink", &ImGuiIO::ConfigCursorBlink)
+            //.def_readonly("config_resize_windows_from_edges", &ImGuiIO::ConfigResizeWindowsFromEdges)
+            .def_readonly("mouse_wheel_h", &ImGuiIO::MouseWheelH)
+            .def_readonly("mouse_draw_cursor", &ImGuiIO::MouseDrawCursor)
+            .def_readonly("key_ctrl", &ImGuiIO::KeyCtrl)
+            .def_readonly("key_shift", &ImGuiIO::KeyShift)
+            .def_readonly("key_alt", &ImGuiIO::KeyAlt)
+            .def_readonly("key_super", &ImGuiIO::KeySuper)
+            .def_property_readonly("keys_down", [](ImGuiIO* self){ return std::vector<bool>(std::begin(self->KeysDown), std::end(self->KeysDown)); })
+            .def_readonly("want_capture_mouse", &ImGuiIO::WantCaptureMouse)
+            .def_readonly("want_capture_keyboard", &ImGuiIO::WantCaptureKeyboard)
+            .def_readonly("want_text_input", &ImGuiIO::WantTextInput)
+            .def_readonly("want_set_mouse_pos", &ImGuiIO::WantSetMousePos)
+            //.def_readonly("want_save_ini_settings", &ImGuiIO::WantSaveIniSettings)
+            .def_readonly("nav_active", &ImGuiIO::NavActive)
+            .def_readonly("nav_visible", &ImGuiIO::NavVisible)
+            .def_readonly("framerate", &ImGuiIO::Framerate)
+            .def_readonly("metrics_render_vertices", &ImGuiIO::MetricsRenderVertices)
+            .def_readonly("metrics_render_indices", &ImGuiIO::MetricsRenderIndices)
+            //.def_readonly("metrics_render_windows", &ImGuiIO::MetricsRenderWindows)
+            .def_readonly("metrics_active_windows", &ImGuiIO::MetricsActiveWindows)
+            //.def_readonly("metrics_active_allocations", &ImGuiIO::MetricsActiveAllocations)
+            .def_readonly("mouse_delta", &ImGuiIO::MouseDelta);
+
+
+
+
 
 	m.def("getio", [](){ return &ImGui::GetIO(); }, py::return_value_policy::reference);
 
@@ -858,6 +909,7 @@ PYBIND11_MODULE(_bimpy, m) {
 			ImGui::StyleColorsLight();
 		});
 
+#if 0
 	m.def("show_demo_window", [](){ ImGui::ShowDemoWindow(); }, "create demo/test window (previously called ShowTestWindow). demonstrate most ImGui features.");
 	m.def("show_about_window", [](){ ImGui::ShowAboutWindow(); }, "create About window. display Dear ImGui version, credits and build/system information.");
 	m.def("show_metrics_window", [](){ ImGui::ShowMetricsWindow(); }, "create metrics window. display ImGui internals: draw commands (with individual draw calls and vertices), window list, basic internal state, etc.");
@@ -865,6 +917,7 @@ PYBIND11_MODULE(_bimpy, m) {
 	m.def("show_style_selector", [](const char* label){ ImGui::ShowStyleSelector(label); }, "add style selector block (not a window), essentially a combo listing the default styles.");
 	m.def("show_font_selector", [](const char* label){ ImGui::ShowFontSelector(label); }, "add font selector block (not a window), essentially a combo listing the loaded fonts.");
 	m.def("show_user_guide", [](){ ImGui::ShowUserGuide(); }, "add basic help/info block (not a window): how to manipulate ImGui as a end-user (mouse/keyboard controls).");
+#endif
 
 
 	m.def("begin",[](const std::string& name, Bool& opened, ImGuiWindowFlags flags) -> bool
@@ -1527,7 +1580,8 @@ PYBIND11_MODULE(_bimpy, m) {
 	m.def("is_mouse_clicked", &ImGui::IsMouseClicked);
 	m.def("is_mouse_double_clicked", &ImGui::IsMouseDoubleClicked);
 	m.def("is_mouse_released", &ImGui::IsMouseReleased);
-	m.def("is_mouse_dragging", &ImGui::IsMouseDragging);
+	m.def("is_mouse_dragging", &ImGui::IsMouseDragging,
+        py::arg("button") = 0, py::arg("lock_threshold") = -1.0f);
 	m.def("is_mouse_hovering_rect", &ImGui::IsMouseHoveringRect);
 	m.def("is_mouse_pos_valid", &ImGui::IsMousePosValid);
 	m.def("get_mouse_pos", &ImGui::GetMousePos);
@@ -1605,6 +1659,7 @@ PYBIND11_MODULE(_bimpy, m) {
 	m.def("add_circle", &AddCircle, py::arg("centre"), py::arg("radius"), py::arg("col"), py::arg("num_segments") = 12, py::arg("thickness") = 1.0f);
 	m.def("add_circle_filled", &AddCircleFilled, py::arg("centre"), py::arg("radius"), py::arg("col"), py::arg("num_segments") = 12);
 	m.def("add_bezier_curve", &AddBezierCurve, py::arg("pos0"), py::arg("cp0"), py::arg("cp1"), py::arg("pos1"), py::arg("col"), py::arg("thickness"), py::arg("num_segments") = 0);
+    m.def("add_text", &AddText, py::arg("pos"), py::arg("col"), py::arg("text"), py::arg("font_size")=0.0f, py::arg("wrap_width")=0.0f);
 
 	m.def("path_clear", &PathClear);
 	m.def("path_line_to", &PathLineTo, py::arg("pos"));
@@ -1700,6 +1755,7 @@ PYBIND11_MODULE(_bimpy, m) {
 
 	m.def("image_button", &ImGui::ImageButton);
 
+#if 0
 	m.attr("key_left_shift") = py::int_(GLFW_KEY_LEFT_SHIFT);
 	m.attr("key_left_control") = py::int_(GLFW_KEY_LEFT_CONTROL);
 	m.attr("key_left_alt") = py::int_(GLFW_KEY_LEFT_ALT);
@@ -1708,6 +1764,7 @@ PYBIND11_MODULE(_bimpy, m) {
 	m.attr("key_right_control") = py::int_(GLFW_KEY_RIGHT_CONTROL);
 	m.attr("key_right_alt") = py::int_(GLFW_KEY_RIGHT_ALT);
 	m.attr("key_right_super") = py::int_(GLFW_KEY_RIGHT_SUPER);
+#endif
 
 	m.def("inject_imgui_context", [](void* other) { GImGui = (ImGuiContext*)other; } );
 }
